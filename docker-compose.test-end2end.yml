version: '3.2'

services:
  api-test-end2end:
    build:
      context: ./api
      dockerfile: ./Dockerfile
    command: >
      bash -c "set -x;
               cd /opt/api;
               while true; do python app.py; done;"
    container_name: ${APP_NAME}-api-test-end2end
    depends_on:
      - apidb-test-end2end
    env_file:
      - ./.env
    environment:
      - ENV=${ENV:-development}
      - GIT_TAG=$GIT_TAG
      - MODE=${MODE:-test-end2end}
      - OBJECT_STORAGE_URL=$OBJECT_STORAGE_URL
      - POSTGRES_URL=postgresql://${APP_NAME}_user:${APP_NAME}_password@apidb-test-end2end/${APP_NAME}
      - SCREEN_SHOT_MACHINE_KEY=$SCREEN_SHOT_MACHINE_KEY
      - TLD=$TLD
    networks:
      - db_test-end2end_nw
      - web_test-end2end_nw
    volumes:
      - ./api:/opt/api

  webapp-test-end2end:
    build:
      context: ./webapp
      dockerfile: ./Dockerfile
    command: >
      bash -c "set -x;
               source ~/.profile;
               ln -sf /lib/node/node_modules /opt/webapp/node_modules;
               cd /opt/webapp;
               yarn start;"
    container_name: ${APP_NAME}-webapp-test-end2end
    depends_on:
      - api-test-end2end
    environment:
      - API_URL=http://nginx-test-end2end:80
      - ENV=${ENV:-development}
      - GIT_TAG=${GIT_TAG}
      - ROOT_PATH=http://localhost:3000
    networks:
      - db_test-end2end_nw
      - web_test-end2end_nw
    volumes:
      - ./webapp:/opt/webapp

  nginx-test-end2end:
    build:
      args:
        - MODE=test-end2end
      context: ./nginx
      dockerfile: ./Dockerfile.nossl
    container_name: ${APP_NAME}-nginx-test-end2end
    depends_on:
      - api-test-end2end
    networks:
      - web_test-end2end_nw

  apidb-test-end2end:
    command: postgres -c logging_collector=on -c log_destination=stderr -c log_min_duration_statement=0 -c log_statement=all -c log_duration=on
    container_name: ${APP_NAME}-apidb-test-end2end
    environment:
      - POSTGRES_DB=${APP_NAME}
      - POSTGRES_PASSWORDWORD=${APP_NAME}_password
      - POSTGRES_USER=${APP_NAME}_user
    image: postgres:10.1
    networks:
      - db_test-end2end_nw
    volumes:
      - "./docker_data_test-end2end/apidb:/var/lib/postgresql"

networks:
  db_test-end2end_nw:
    driver: bridge
  web_test-end2end_nw:
    driver: bridge

volumes:
  docker_data_test-end2end:
